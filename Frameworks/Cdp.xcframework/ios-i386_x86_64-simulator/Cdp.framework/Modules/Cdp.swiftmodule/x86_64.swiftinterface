// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Cdp
import AdSupport
@_exported import Cdp
import Core
import CoreData
import Foundation
import Swift
extension NSManagedObjectContext {
  public func executeAndMergeChanges(using batchDeleteRequest: CoreData.NSBatchDeleteRequest) throws
}
extension HTTPURLResponse {
  public var statusMessage: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class CdpConfig : ObjectiveC.NSObject, Core.CoreModuleConfig {
  @objc final public let name: Swift.String
  @objc final public let appId: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(CdpEvent) public class Event : ObjectiveC.NSObject {
  @objc public static func engagement(eventType: Swift.String) -> Cdp.Event?
  @objc public static func engagement(eventType: Swift.String, attributes: [Swift.String : Any]) -> Cdp.Event?
  @objc public static func profile(eventType: Swift.String) -> Cdp.Event?
  @objc public static func profile(eventType: Swift.String, attributes: [Swift.String : Any]) -> Cdp.Event?
  @objc public static func getIdfa() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CdpSdk : ObjectiveC.NSObject, Core.CoreModule {
  @objc public static var shared: Cdp.CdpSdk {
    @objc get
  }
  @discardableResult
  @objc final public class func configure(_ config: Cdp.CdpConfig) -> Cdp.CdpSdk
  @objc final public var coreModuleConfig: Core.CoreModuleConfig
  @objc final public var _coreComponents: Core.CoreComponents?
  final public let config: Cdp.CdpConfig
  @objc final public var state: Swift.String {
    @objc get
  }
  @objc final public var consent: Cdp.Consent {
    @objc get
    @objc set(consent)
  }
  @objc final public func track(event: Cdp.Event?)
  @objc final public func setLocation(coordinates: Cdp.Coordinates?, expiresIn: Swift.Int)
  @objc final public class func setLogLevel(_ logLevel: Core.MCLogLevel, logOutputter: Core.LogOutputter)
  @objc deinit
}
public func httpResponseStatusToMessage(statusCode: Swift.Int) -> Swift.String
@objc(CdpCoordinates) public class Coordinates : ObjectiveC.NSObject {
  @objc final public let latitude: Swift.Double
  @objc final public let longitude: Swift.Double
  @objc public init?(latitude: Swift.Double, longitude: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CdpConfigBuilder : ObjectiveC.NSObject {
  @objc public init(appId: Swift.String, endpoint: Swift.String)
  @objc public func trackScreens(_ enable: Swift.Bool) -> Cdp.CdpConfigBuilder
  @objc public func trackLifecycle(_ enable: Swift.Bool) -> Cdp.CdpConfigBuilder
  @objc public func sessionTimeout(_ seconds: Swift.Int) -> Cdp.CdpConfigBuilder
  @objc public func build() -> Cdp.CdpConfig
  @objc deinit
  @objc override dynamic public init()
}
@objc(CdpConsent) public enum Consent : Swift.Int {
  case optIn
  case optOut
  case pending
  public init(fromString: Swift.String?)
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(QueueEventEntity) public class QueueEventEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension QueueEventEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Cdp.QueueEventEntity>
  @objc @NSManaged dynamic public var category: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var failedAttempts: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var payload: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var priority: Swift.Int64 {
    @objc get
    @objc set
  }
}
extension Cdp.Consent : Swift.Equatable {}
extension Cdp.Consent : Swift.Hashable {}
extension Cdp.Consent : Swift.RawRepresentable {}
